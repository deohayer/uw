#!/usr/bin/env bash

# Definitions are scattered, so that they are defined only if needed.
# Some identifiers are available to the user:
#  * uw_fail - function to print an error message and exit.
#  * uw_init - function to handle command completion and options.
#  * UW_DIR  - absolute path to workspace root, a directory that contains ".uw".
#  * UW_SUB  - absolute path to ".uw" subdirectory within the workspace.
#  * UW_VER  - script version.
#  * UW_HELP - help text for a particular ".uw/uw*.sh".
#  * UW_TGTS - suggested values for TGT argument for a particular ".uw/uw*.sh".

# Program version, always updated in a separate tagged commit.
declare -r UW_VER="0.8.0"

###############################################################################
# CLI definitions
###############################################################################

# Commands that can only be run in a workspace.
declare -ra _UW_CLI_SCRIPTS=(
    "uwa"
    "uwd"
    "uwp"
    "uwc"
    "uws"
    "uwf"
    "uwb"
    "uwi"
    "uwt"
    "uwx"
)
# Commands that can be run everywhere.
declare -ra _UW_CLI_GLOBALS=(
    "app-update"
    "app-setup"
    "app-reset"
    "init"
)
# Options - each has a separate _uw_opt_* variable.
declare -ra _UW_CLI_OPTIONS=(
    "--bashrc"
    "--version"
    "--help"
)
# Short descriptions for the commands.
declare -rA _UW_CLI_HELPS=(
    [uwa]="Attach to the hardware."
    [uwd]="Detach from the hardware."
    [uwp]="Manage the power state of the hardware."
    [uwc]="Copy file between the local machine and the hardware."
    [uws]="The hardware shell."
    [uwf]="Fetch the software."
    [uwb]="Build the software."
    [uwi]="Install the software."
    [uwt]="Test the software."
    [uwx]="Extensions - custom actions."
    [app-update]="Download the latest version."
    [app-setup]="Modify .bashrc to register uw completion and aliases."
    [app-reset]="Revert changes to .bashrc made by app-setup."
    [init]="Create an empty workspace."
    [--bashrc]="Setup completion and aliases, then exit."
    [--help]="Print the help text, then exit."
    [--version]="Print the version, then exit."
)

# Declare aliases for the scripts. They can be called outside a workspace.
shopt -s expand_aliases
for i in "${_UW_CLI_SCRIPTS[@]}"; do
    alias "$i"="uw $i"
done

# A command to execute.
declare _UW_CLI_COMMAND=""
# Option: show help.
declare _UW_CLI_OPTION_HELP=""
# Option: setup completion and aliases.
declare _UW_CLI_OPTION_BASHRC=""
# Option: show version.
declare _UW_CLI_OPTION_VERSION=""
# Option: perform completion instead of execution (hidden).
declare _UW_CLI_OPTION_COMPLETE=""

for i in "$@"; do
    if [[ "$i" == "--help" ]]; then
        _UW_CLI_OPTION_HELP="$i"
        shift
        continue
    fi
    if [[ "$i" == "--bashrc" ]]; then
        _UW_CLI_OPTION_BASHRC="$i"
        shift
        continue
    fi
    if [[ "$i" == "--version" ]]; then
        _UW_CLI_OPTION_VERSION="$i"
        shift
        continue
    fi
    if [[ "$i" == "--complete" ]]; then
        _UW_CLI_OPTION_COMPLETE="$i"
        shift
        continue
    fi
    _UW_CLI_COMMAND="$i"
    shift
    break
done

###############################################################################
# Option handling
###############################################################################

# This section handles options that do not require a command:
#  * --bashrc
#  * --version
#  * --help

#
# uw --bashrc
#

# Determine the workspace root.
function _uw_root()
{
    # Search recursively backwards, starting from the current directory.
    declare UW_DIR="$PWD"
    while true; do
        # Found.
        if [[ -d "$UW_DIR/.uw" ]]; then
            break
        fi
        # Not found up to the root directory.
        if [[ "$UW_DIR" == "/" ]]; then
            UW_DIR=""
            break
        fi
        # Not found, recurse into the parent directory.
        UW_DIR="$(dirname "$UW_DIR")"
    done
    echo "$UW_DIR"
}

function _uw_completion()
{
    # Redeclare _UW_CLI_COMMAND as local, parse it from COMP_WORDS.
    declare _UW_CLI_COMMAND=""
    if [[ "${COMP_WORDS[0]}" != "uw" ]]; then
        # Case of a uw* alias.
        _UW_CLI_COMMAND="${COMP_WORDS[0]}"
    else
        # Case of the uw application.
        for i in "${!COMP_WORDS[@]}"; do
            # Filter out uw itself and its options.
            if false \
                || (( $i == 0 )) \
                || [[ "${COMP_WORDS[$i]}" == "--help" ]] \
                || [[ "${COMP_WORDS[$i]}" == "--bashrc" ]] \
                || [[ "${COMP_WORDS[$i]}" == "--version" ]] \
                || [[ "${COMP_WORDS[$i]}" == "--complete" ]] \
                ; then
                continue
            fi
            # The first non-special word is the command (command completion).
            # Skip if it is the word to complete (application completion).
            if (( $i != $COMP_CWORD )); then
                _UW_CLI_COMMAND="${COMP_WORDS[$i]}"
            fi
            break
        done
    fi
    # All completion suggestions as a single string.
    declare _UW_CLI_COMPWORDS=""
    if [[ -n "$_UW_CLI_COMMAND" ]]; then
        # The command completion uses the "--complete" flag.
        # It outputs both options and values. The output is then grepped by
        # presense of "-". The grep invertion flag is used for the filtering.
        declare _UW_CLI_INVERT="--invert-match"
        if [[ "${COMP_WORDS[$COMP_CWORD]:0:1}" == "-" ]]; then
            _UW_CLI_INVERT=""
        fi
        _UW_CLI_COMPWORDS="$(uw --complete "$_UW_CLI_COMMAND" 2>/dev/null | grep $_UW_CLI_INVERT -E '^-' || true)"
    else
        # The application completion.
        # Dynamically determine the workspace root.
        declare -r UW_DIR="$(_uw_root)"
        # Populate the available commands.
        declare -a _UW_CLI_COMMANDS=()
        if [[ -n "$UW_DIR" ]]; then
            _UW_CLI_COMMANDS+=("${_UW_CLI_SCRIPTS[@]}")
        fi
        _UW_CLI_COMMANDS+=("${_UW_CLI_GLOBALS[@]}")
        # Set _UW_CLI_COMPWORDS for options or commands.
        if [[ "${COMP_WORDS[$COMP_CWORD]:0:1}" == "-" ]]; then
            _UW_CLI_COMPWORDS="${_UW_CLI_OPTIONS[*]}"
        else
            _UW_CLI_COMPWORDS="${_UW_CLI_COMMANDS[*]}"
        fi
    fi
    # Generate actual completions.
    COMPREPLY=($(compgen -W "$_UW_CLI_COMPWORDS" -- "${COMP_WORDS[$COMP_CWORD]}"))
}

# It should be handled first, so that the script returns before polluting the
# namespace with more identifiers.
if [[ -n "$_UW_CLI_OPTION_BASHRC" ]]; then
    complete -o filenames -o bashdefault -o default -F _uw_completion uw
    for i in "${_UW_CLI_SCRIPTS[@]}"; do
        complete -o filenames -o bashdefault -o default -F _uw_completion "$i"
    done
    # Cleanup, since whatever is defined stays permanently.
    unset _UW_CLI_COMMAND
    unset _UW_CLI_OPTION_HELP
    unset _UW_CLI_OPTION_BASHRC
    unset _UW_CLI_OPTION_VERSION
    unset _UW_CLI_OPTION_COMPLETE
    return
fi

#
# uw --version
#

if [[ -n "$_UW_CLI_OPTION_VERSION" ]]; then
    echo "$UW_VER"
    exit 0
fi

#
# uw --help
#

# Print an argument section.
#
# Parameters:
#  * 1 - the section title.
#  * 2 - a reference to a list of arguments.
#  * 3 - a reference to a list of helps for the arguments.
function _uw_print_args()
{
    # Parse arguments.
    declare -r _TITLE="$1"
    declare -n _NAMES="$2"
    declare -n _HELPS="$3"
    # Determine the longest argument name.
    declare _LENGTH=0
    for i in "${_NAMES[@]}"; do
        if (( ${#i} > $_LENGTH )); then
            _LENGTH=${#i}
        fi
    done
    # Print the section.
    printf "\n$_TITLE:\n"
    for i in "${_NAMES[@]}"; do
        printf "  %-${_LENGTH}s    ${_HELPS[$i]}\n" "$i"
    done
}

if [[ -n "$_UW_CLI_OPTION_HELP" ]]; then
    # Print the header.
    printf "%s\n" \
        "uw ..." \
        "" \
        "Uniform Workspace version $UW_VER."
    # Populate the available commands.
    declare -a _UW_CLI_COMMANDS=()
    if [[ -n "$(_uw_root)" ]]; then
        _UW_CLI_COMMANDS+=("${_UW_CLI_SCRIPTS[@]}")
    fi
    _UW_CLI_COMMANDS+=("${_UW_CLI_GLOBALS[@]}")
    # Print the commands.
    _uw_print_args "Commands" "_UW_CLI_COMMANDS" "_UW_CLI_HELPS"
    # Print optional arguments.
    _uw_print_args "Optional arguments" "_UW_CLI_OPTIONS" "_UW_CLI_HELPS"
    echo
    exit 0
fi

###############################################################################
# Command handling
###############################################################################

# Print an error message and exit. Also available to the user.
#
# Parameters:
#  * 1 - the message.
#  * 2 - the exit code.
function uw_fail()
{
    echo "$1" >&2
    exit ${2:-1}
}

# Handle the following options per command:
#  * --help
#  * --version
#  * --complete (the global one)
# This function should be called at the start of each command execution.
# Generated uw*.sh scripts already include the call. The user is supposed to
# extend it by providing a list of suggested values for the TGT argument.
function uw_init()
{
    set -e
    # Any command must not have positional argument names that exceed three
    # letters. This is to have a consistent offset for printing UW_TGTS and
    # not calcualte it dynamically.
    # Each command must define the following:
    declare _UW_USAGE=""      # A usage string for the help text.
    declare -a _UW_ARGSP=()   # Positional arguments.
    declare -a _UW_ARGSO=(    # Optional arguments.
        "--help"
        "--version"
    )
    declare -A _UW_HELPS=(    # Help texts for the arguments.
        [--help]="${_UW_CLI_HELPS[--help]}"
        [--version]="${_UW_CLI_HELPS[--version]}"
    )
    # app-*
    if false \
        || [[ "$_UW_CLI_COMMAND" == "app-update" ]] \
        || [[ "$_UW_CLI_COMMAND" == "app-reset" ]] \
        || [[ "$_UW_CLI_COMMAND" == "app-setup" ]] \
        ; then
        _UW_USAGE="uw $_UW_CLI_COMMAND"
    fi
    # init
    if [[ "$_UW_CLI_COMMAND" == "init" ]]; then
        _UW_USAGE="uw $_UW_CLI_COMMAND [DIR]"
        _UW_ARGSP+=("DIR")
        _UW_HELPS+=([DIR]="A directory to initialize, defaults to PWD.")
    fi
    # uwa
    if [[ "$_UW_CLI_COMMAND" == "uwa" ]]; then
        _UW_USAGE="uw $_UW_CLI_COMMAND [TGT]"
        _UW_ARGSP+=("TGT")
        _UW_HELPS+=([TGT]="A target to attach to.")
    fi
    # uwd
    if [[ "$_UW_CLI_COMMAND" == "uwd" ]]; then
        _UW_USAGE="uw $_UW_CLI_COMMAND"
    fi
    # uwp
    if [[ "$_UW_CLI_COMMAND" == "uwp" ]]; then
        _UW_USAGE="uw $_UW_CLI_COMMAND [TGT]"
        _UW_ARGSP+=("TGT")
        _UW_HELPS+=([TGT]="A power state to set.")
    fi
    # uwc
    if [[ "$_UW_CLI_COMMAND" == "uwc" ]]; then
        _UW_USAGE="uw $_UW_CLI_COMMAND [TGT:]SRC [TGT:]DST"
        _UW_ARGSP+=("SRC")
        _UW_ARGSP+=("DST")
        _UW_ARGSP+=("TGT")
        _UW_HELPS+=([SRC]="Source path.")
        _UW_HELPS+=([DST]="Destination path.")
        _UW_HELPS+=([TGT]="A target for file transfer.")
    fi
    # uws
    if [[ "$_UW_CLI_COMMAND" == "uws" ]]; then
        _UW_USAGE="uw $_UW_CLI_COMMAND [TGT] [CMD...]"
        _UW_ARGSP+=("CMD")
        _UW_ARGSP+=("TGT")
        _UW_HELPS+=([CMD]="A command to execute. If empty - start an interactive session.")
        _UW_HELPS+=([TGT]="A target for shell.")
    fi
    # uwf, uwb, uwi, uwt, uwx.
    if false \
        || [[ "$_UW_CLI_COMMAND" == "uwf" ]] \
        || [[ "$_UW_CLI_COMMAND" == "uwb" ]] \
        || [[ "$_UW_CLI_COMMAND" == "uwi" ]] \
        || [[ "$_UW_CLI_COMMAND" == "uwt" ]] \
        || [[ "$_UW_CLI_COMMAND" == "uwx" ]] \
        ; then
        _UW_USAGE="uw $_UW_CLI_COMMAND [TGT...]"
        _UW_ARGSP+=("TGT")
        _UW_HELPS+=([TGT]="Targets for the operation.")
    fi
    # uw --complete <cmd>
    if [[ -n "$_UW_CLI_OPTION_COMPLETE" ]]; then
        printf "%s\n" "${_UW_ARGSO[@]}"
        printf "%s\n" "${UW_TGTS[@]}"
        exit 0
    fi
    # uw <cmd> --version
    if [[ "$1" == "--version" ]]; then
        echo "$UW_VER"
        exit 0
    fi
    # uw <cmd> --help
    if [[ "$1" == "--help" ]]; then
        # Print usage.
        printf "$_UW_USAGE\n"
        # Print description.
        if [[ -n "$UW_HELP" ]]; then
            printf "\n$UW_HELP\n"
        fi
        # Print positional arguments.
        if [[ -n "${_UW_ARGSP[*]}" ]]; then
            _uw_print_args "Positional arguments" "_UW_ARGSP" "_UW_HELPS"
            # Print the suggested values for TGT with a proper offset.
            for i in "${UW_TGTS[@]}"; do
                printf "          * $i\n"
            done
        fi
        # Print optional arguments.
        _uw_print_args "Optional arguments" "_UW_ARGSO" "_UW_HELPS"
        echo
        exit 0
    fi
}

#
# uw
#

if [[ -z "$_UW_CLI_COMMAND" ]]; then
    uw_fail "uw: The command must be specified."
fi

#
# uw app-update
#

# The function is required to make sure that the commands are read and executed at once.
# The script lines are likely to be shifted after the update. Since bash typically reads
# and executes scripts part-by-part, a simple implementation might cause weird errors.
function _uw_update
{
    curl -o "$(which uw)" https://raw.githubusercontent.com/deohayer/uw/main/uw
    exit 0
}

if [[ "$_UW_CLI_COMMAND" == "app-update" ]]; then
    declare -r UW_HELP="${_UW_CLI_HELPS[app-update]}"
    uw_init "$@"
    _uw_update
fi

#
# uw app-setup
#

if [[ "$_UW_CLI_COMMAND" == "app-setup" ]]; then
    declare -r UW_HELP="${_UW_CLI_HELPS[app-setup]}"
    uw_init "$@"
    printf '\nsource "$(which uw)" --bashrc 2>/dev/null || true\n' >> "$HOME/.bashrc"
    exit 0
fi

#
# uw app-reset
#

if [[ "$_UW_CLI_COMMAND" == "app-reset" ]]; then
    declare -r UW_HELP="${_UW_CLI_HELPS[app-reset]}"
    uw_init "$@"
    sed -i '/source "$(which uw)" --bashrc 2>\/dev\/null || true/d' "$HOME/.bashrc"
    exit 0
fi

#
# uw init
#

if [[ "$_UW_CLI_COMMAND" == "init" ]]; then
    declare -r UW_HELP="${_UW_CLI_HELPS[init]}"
    uw_init "$@"
    # Default to the current directory.
    declare -r _UW_DIR="$(realpath "${1:-"$PWD"}")"
    declare -r _UW_SUB="$_UW_DIR/.uw"
    # The directory is already a workspace.
    if [[ -e "$_UW_SUB" ]]; then
        uw_fail "uw init: Already initialized: $_UW_DIR"
    fi
    # Populate .uw.
    mkdir -p "$_UW_SUB"
    # Populate env.sh
    printf '# This script is sourced before execution of any uw* script.\n' > "$_UW_SUB/env.sh"
    # Populate uw*.sh
    for i in "${_UW_CLI_SCRIPTS[@]}"; do
        printf "%s\n" \
            '#!/usr/bin/env bash' \
            'declare -r UW_HELP='"\"${_UW_CLI_HELPS[$i]}\"" \
            'declare -ra UW_TGTS=()' \
            'uw_init "$@"' \
            '' \
            'uw_fail "Not implemented."' \
            > "$_UW_SUB/$i.sh"
    done
    # Success.
    exit 0
fi

#
# uw uw*
#

for i in "${_UW_CLI_SCRIPTS[@]}"; do
    if [[ "$_UW_CLI_COMMAND" == "$i" ]]; then
        # This is the value of UW_DIR that is available to the user.
        declare -r UW_DIR="$(_uw_root)"
        declare -r UW_SUB="$UW_DIR/.uw"
        # Fail to execute if not in a workspace.
        if [[ -z "$UW_DIR" ]]; then
            uw_fail "uw $_UW_CLI_COMMAND: Only available in a workspace."
        fi
        # Execute the script.
        set -e
        source "$UW_SUB/env.sh"
        source "$UW_SUB/$_UW_CLI_COMMAND.sh"
        exit 0
    fi
done

#
# uw <cmd>
#

if [[ "${_UW_CLI_COMMAND:0:1}" == "-" ]]; then
    uw_fail "uw: Unrecognized option: $_UW_CLI_COMMAND"
else
    uw_fail "uw: Unrecognized command: $_UW_CLI_COMMAND"
fi
